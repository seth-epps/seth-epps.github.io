{"version":3,"sources":["util/mediaHelper.js","components/IconWrapper/IconWrapper.js","constants/constants.js","components/Footer/Footer.js","components/Header/Header.js","pages/Main/Main.js","App.js","serviceWorker.js","index.js"],"names":["SIZES","DESKTOP","Number","MAX_VALUE","TABLET","MOBILE","Object","keys","reduce","acc","label","css","ICON_SIZES","FONT_SIZES","CircleWrapper","styled","div","mediaHelper","IconWrapper","refLink","children","onClick","window","open","PERSONAL_SITES","Container","Footer","icon","faTwitter","faLinkedinIn","faGithubAlt","faEnvelope","HeaderContainer","header","Header","Main","props","MainContent","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sSAEaA,EAAQ,CAClBC,QAASC,OAAOC,UAChBC,OAAQ,IACRC,OAAQ,KAGIC,SAAOC,KAAKP,GAAOQ,QAAO,SAACC,EAAKC,GAO3C,OANAD,EAAIC,GAAS,kBAAaC,YAAG,wFACNX,EAAMU,GAAS,GAChCC,IAAG,0BAIFF,IACN,ICZCG,EACO,GADPA,EAEM,GAFNA,EAGM,GAGNC,EACO,GADPA,EAEM,KAFNA,EAGM,IAGNC,EAAgBC,IAAOC,IAAG,iXAGlBJ,EACDA,EACMA,EACFC,EAcXI,EAAYb,OAAM,sIACNQ,EACDA,EACMA,EACFC,GAGfI,EAAYZ,OAAM,sIACNO,EACDA,EACMA,EACFC,IAKRK,EAAc,SAAH,OAAKC,EAAO,EAAPA,QAASC,EAAQ,EAARA,SAAQ,OAC1C,kBAACN,EAAa,CAACO,QAAS,kBAAKC,OAAOC,KAAKJ,EAAS,YAC7CC,ICtDII,EACJ,+BADIA,EAEA,+BAFAA,EAGE,iDCKTC,EAAYV,IAAOC,IAAG,8KAUfU,EAAS,WAAH,OACf,kBAACD,EAAS,KACN,kBAAC,EAAW,CAACN,QAASK,GAClB,kBAAC,IAAe,CAACG,KAAMC,OAE3B,kBAAC,EAAW,CAACT,QAASK,GAClB,kBAAC,IAAe,CAACG,KAAME,OAE3B,kBAAC,EAAW,CAACV,QAASK,GAClB,kBAAC,IAAe,CAACG,KAAMG,OAE3B,kBAAC,EAAW,CAACX,QAAO,iBDvBP,0BCwBT,kBAAC,IAAe,CAACQ,KAAMI,SC3B7BC,EAAkBjB,IAAOkB,OAAM,gEAIxBC,EAAS,WAAH,OACf,kBAACF,EAAe,KACX,cCJHP,EAAYV,IAAOC,IAAG,4KASfmB,EAAO,SAACC,GACjB,OACI,kBAAC,EAAS,KACN,kBAAC,EAAM,MACP,kBAAC,EAAM,QCdbC,EAActB,IAAOC,IAAG,8LAkBfsB,MARf,WACE,OACE,kBAACD,EAAW,KACV,kBAAC,EAAI,QCLSE,QACW,cAA7BjB,OAAOkB,SAASC,UAEe,UAA7BnB,OAAOkB,SAASC,UAEhBnB,OAAOkB,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAG,MAAKC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.4b9fb34c.chunk.js","sourcesContent":["import { css } from 'styled-components'\n\nexport const SIZES = {\n   DESKTOP: Number.MAX_VALUE,\n   TABLET: 900,\n   MOBILE: 650\n};\n\nexport default Object.keys(SIZES).reduce((acc, label) => {\n    acc[label] = (...args) => css`\n      @media (max-width: ${SIZES[label] / 16}em) {\n        ${css(...args)}\n      }\n    `;\n\n    return acc;\n  }, {});","import React from \"react\";\nimport styled from \"styled-components\";\nimport mediaHelper from \"../../util/mediaHelper\";\n\nconst ICON_SIZES = {\n    DESKTOP: 35,\n    TABLET: 25,\n    MOBILE: 20\n};\n\nconst FONT_SIZES = {\n    DESKTOP: 15,\n    TABLET: 10.7,\n    MOBILE: 8.6\n}\n\nconst CircleWrapper = styled.div`\n    display: block;\n\n    height: ${ICON_SIZES.DESKTOP}px;\n    width: ${ICON_SIZES.DESKTOP}px;\n    line-height: ${ICON_SIZES.DESKTOP}px;\n    font-size: ${FONT_SIZES.DESKTOP}px;\n\n    text-align: center;\n    border: 1px white solid;\n    border-radius: 50%;\n\n    transition: 200ms;\n\n    margin-right: 5px;\n    &: hover {\n        color: grey;\n        border-color: grey;\n    }\n\n    ${mediaHelper.TABLET`\n        height: ${ICON_SIZES.TABLET}px;\n        width: ${ICON_SIZES.TABLET}px;\n        line-height: ${ICON_SIZES.TABLET}px;\n        font-size: ${FONT_SIZES.TABLET}px;\n    `}\n\n    ${mediaHelper.MOBILE`\n        height: ${ICON_SIZES.MOBILE}px;\n        width: ${ICON_SIZES.MOBILE}px;\n        line-height: ${ICON_SIZES.MOBILE}px;\n        font-size: ${FONT_SIZES.MOBILE}px;\n    `}\n\n`;\n\nexport const IconWrapper = ({refLink, children}) => (\n    <CircleWrapper onClick={()=> window.open(refLink, '_blank')}>\n        {children}\n    </CircleWrapper>\n);\n\n","export const PERSONAL_SITES = {\n    GIT: \"https://github.com/seth-epps\",\n    TWITTER: \"https://twitter.com/SethEpps\",\n    LINKED_IN: \"https://www.linkedin.com/in/seth-epps-2a826873\"\n};\n\nexport const EMAIL = \"seth.d.epps@gmail.com\";","import React from \"react\";\nimport styled from \"styled-components\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faGithubAlt, faLinkedinIn, faTwitter } from '@fortawesome/free-brands-svg-icons';\nimport { faEnvelope } from \"@fortawesome/free-solid-svg-icons\";\nimport { IconWrapper } from \"../IconWrapper/IconWrapper\";\nimport { EMAIL, PERSONAL_SITES } from \"../../constants/constants\";\n\nconst Container = styled.div`\n    display: flex;\n    flex-direction: row;\n    justify-content: flex-end;\n    align-items: center;\n    width: 100%;\n\n    margin-top: 2px;\n`;\n\nexport const Footer = () => (\n    <Container>\n        <IconWrapper refLink={PERSONAL_SITES.TWITTER} >\n            <FontAwesomeIcon icon={faTwitter} />\n        </IconWrapper>\n        <IconWrapper refLink={PERSONAL_SITES.LINKED_IN} >\n            <FontAwesomeIcon icon={faLinkedinIn} />\n        </IconWrapper>\n        <IconWrapper refLink={PERSONAL_SITES.GIT} >\n            <FontAwesomeIcon icon={faGithubAlt} />\n        </IconWrapper>\n        <IconWrapper refLink={`mailto:${EMAIL}`} >\n            <FontAwesomeIcon icon={faEnvelope} />\n        </IconWrapper>\n    </Container>\n);","import React from \"react\";\nimport styled from \"styled-components\";\n\nconst HeaderContainer = styled.header`\n    font-size: calc(20px + 3vmin);\n`;\n\nexport const Header = () => (\n    <HeaderContainer>\n        {\"Seth Epps\"}\n    </HeaderContainer>\n);","import React from \"react\";\nimport styled from \"styled-components\";\nimport { Footer } from \"../../components/Footer/Footer\";\nimport { Header } from \"../../components/Header/Header\";\n\nconst Container = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    height: 600px;\n    color: white;\n`;\n\nexport const Main = (props) => {\n    return (\n        <Container>\n            <Header/>\n            <Footer/>\n        </Container>\n    );\n}","import React from 'react';\nimport styled from \"styled-components\";\nimport { Main } from \"./pages/Main/Main\";\n\nconst MainContent = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\tbackground-color: #282c34;\n\theight: 100vh;\n\toverflow: hidden;\n\tposition: relative;\n`;\n\nfunction App() {\n  return (\n    <MainContent>\n      <Main/>\n    </MainContent>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}